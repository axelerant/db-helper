<?php

/**
 * @file
 */

namespace MigrateHelper\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Output\StreamOutput;

class ListFields extends Command
{

    protected function configure()
    {
        $this
            ->setName("db:fields")
            ->setDescription("List all fields in all tables")
            ->addArgument(
              'host',
              InputArgument::REQUIRED,
              "Database host"
            )
            ->addArgument(
              'dbname',
              InputArgument::REQUIRED,
              "Database name"
            )
            ->addOption(
              'user',
              'u',
              InputOption::VALUE_REQUIRED,
              "Database login user"
            )
            ->addOption(
              'password',
              'p',
              InputOption::VALUE_REQUIRED,
              "Database login password"
            )
            ->addOption(
              'file',
              'f',
              InputOption::VALUE_OPTIONAL,
              "Output file"
            );
    }

    protected function interact(InputInterface $input, OutputInterface $output)
    {
        parent::interact($input,
          $output); // TODO: Change the autogenerated stub
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $host = $input->getArgument('host');
        $db = $input->getArgument('dbname');
        $user = $input->getOption('user');
        $password = $input->getOption('password');

        $file = $input->getOption('file');
        if ($file) {
            $handle = fopen($file, 'w');
            $out = new StreamOutput($handle);
        }
        else {
            $out = $output;
        }

        $dbconn = mssql_connect($host, $user, $password);
        mssql_select_db($db, $dbconn);

        $tables = [];
        $res = mssql_query("SELECT * FROM INFORMATION_SCHEMA.TABLES ORDER BY TABLE_NAME ");
        while ($row = mssql_fetch_assoc($res)) {
            $tables[$row['TABLE_NAME']] = $row;
        }

        $res = mssql_query("SELECT * FROM INFORMATION_SCHEMA.COLUMNS ORDER BY TABLE_NAME, ORDINAL_POSITION");
        while ($row = mssql_fetch_assoc($res)) {
            $tables[$row['TABLE_NAME']]['columns'][$row['COLUMN_NAME']] = $row;
        }

        // Output tables.
        foreach ($tables as $table_name => $table_data) {
            $table = $table_data['TABLE_SCHEMA'] . "." . $table_name . " (" . strtolower($table_data['TABLE_TYPE']) . ")";
            $out->writeln($table);
            foreach ($table_data['columns'] as $column_name => $column_data) {
                $max_len = $column_data['CHARACTER_MAXIMUM_LENGTH'] ? "(" . $column_data['CHARACTER_MAXIMUM_LENGTH'] . "}" : "";
                $column = $column_name . " (" . $column_data['DATA_TYPE'] . $max_len . ")";
                $column .= " " . ($column_data['IS_NULLABLE'] != 'NO' ? 'NULL' : 'NOT NULL');
                $column .= " " . $column_data['COLUMN_DEFAULT'];
                $out->writeln($column);
            }
        }
    }
}
